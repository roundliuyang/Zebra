/* * Copyright (c) 2011-2018, Meituan Dianping. All Rights Reserved. * * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements. See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License. You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.dianping.zebra.group.router;import java.util.Map;import java.util.Random;import java.util.Set;import java.util.TreeSet;import com.dianping.zebra.group.config.datasource.entity.DataSourceConfig;/** * 按权重做路由的DataSource选择器 */public class WeightDataSourceRouter implements DataSourceRouter {	private WeightRandom weightRandom;	public WeightDataSourceRouter(Map<String, DataSourceConfig> dataSourceConfigs) {		this.weightRandom = new WeightRandom(dataSourceConfigs);	}	@Override	public RouterTarget select(RouterContext routerInfo) {		return weightRandom.select(routerInfo.getExcludeTargets());	}	private static class WeightRandom {		private int groupDataSourceTargetSize = 0;		private TreeSet<RouterTarget> targets = new TreeSet<RouterTarget>();		private Random random = new Random();		// private final ThreadLocal<Random> rnd = new ThreadLocal<Random>() {		// @Override		// protected Random initialValue() {		// return new Random();		// }		// };		public WeightRandom(Map<String, DataSourceConfig> configs) {			for (DataSourceConfig config : configs.values()) {				int weight = config.getWeight();				groupDataSourceTargetSize += weight;				RouterTarget groupDataSourceTarget = new RouterTarget(config.getId(), weight, groupDataSourceTargetSize - 1);				targets.add(groupDataSourceTarget);			}		}		public RouterTarget select(Set<RouterTarget> excludeTargets) {			if (!this.targets.isEmpty()) {				TreeSet<RouterTarget> weights = this.targets;				int tmpGroupDataSourceTargetSize = this.groupDataSourceTargetSize;				if (excludeTargets != null && !excludeTargets.isEmpty()) {					// 需要排除某些GroupDataSourceTarget的话，就重新copy一个weights					TreeSet<RouterTarget> copyWeights = new TreeSet<RouterTarget>();					tmpGroupDataSourceTargetSize = 0;					for (RouterTarget routerTarget : weights) {						if (excludeTargets.contains(routerTarget)) {							continue;						}						// 先将节点先放入到排序集合中						// 假设  节点1 -> weight=2, 节点2 -> weight=3						// 则在排序树中 节点1 -> sort=2, 节点2 -> sort = 2+3						int weight = routerTarget.getWeight();						tmpGroupDataSourceTargetSize += weight;						copyWeights.add(new RouterTarget(routerTarget.getId(), weight, tmpGroupDataSourceTargetSize - 1));					}					weights = copyWeights;				}				if (weights.isEmpty() || tmpGroupDataSourceTargetSize <= 0) {					return null;				}				// 取一个随机数				int randomNum = random.nextInt(tmpGroupDataSourceTargetSize);				RouterTarget tempForSearch = new RouterTarget(null, -1, randomNum);				// 排序集合中最靠近随机数的entry则为目标节点				return weights.ceiling(tempForSearch);			} else {				return null;			}		}	}	@Override	public String getName() {		return "weight-random";	}}